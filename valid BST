public class validBST {
    static class node
    {
        int data;
        node left;
         node right;

         public node(int data)
         {
            this.data=data;
            this.left=null;
            this.right=null;
         }
    }
    public static node insert(node root,int val)
    {
        if(root==null)
        {
            root=new node(val);
            return root;
        }
        if(root.data>val)
        {
            root.left=insert(root.left,val);
        }
        if(root.data<val)
        {
            root.right=insert(root.right,val);
        }
        return root;
    }
    public static void inorder(node root)
    {
        if(root==null)
        {
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);
    }
    public static boolean validbst(node root,node min,node max)
    {
        if(root==null)
        {
            return false;
        }
        if(min!=null&&root.data<=min.data)
        {
            return false;
        }
        else if(max!=null&&root.data>=max.data)
        {
            return false;
        }
        return validbst(root.left,min,root)&&validbst(root.right,root,max);
    }
    public static void main(String[] args) {
        int val[]={1,1,1};
        node root=null;

        for(int i=0;i<val.length;i++)
        {
            root=insert(root,val[i]);
        }
        inorder(root);
        System.out.println();

        if(validbst(root,null,null))
        {
            System.out.println("valid");
        }
        else{
            System.out.println("not valid");
        }
    }
}
