public class deleteanode {
    static class node{
        int data;
        node left;
        node right;

        public node(int data)
        {
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    public static node insert(node root,int values)
    {
        if(root==null)
        {
            root=new node(values);
            return root;
        }
        if(root.data>values)
        {
            root.left=insert(root.left,values);
        }
        if(root.data<values)
        {
            root.right=insert(root.right,values);
        }
        return root;
    }
    public static node delete(node root,int values)
    {
        if(root.data<values)
        {
            root.right=delete(root.right,values);
        }
        else if(root.data>values)
        {
            root.left=delete(root.left,values);
        }
        else{
            //case 1
            if(root.left==null&&root.right==null)
            {
                return null;
            }
            //case 2 one child
            if(root.left==null)
            {
                return root.right;
            }
            if(root.right==null)
            {
                return root.left;
            }
            //case 3 two child 
            node IS=inordersuccessor(root.right);
            root.data=IS.data;
            root.right=delete(root.right,IS.data);

        }
        return root;
    }
    public static void inorder(node root)
    {
        if(root==null)
        {
            return;
        }
        inorder(root.left);
        System.out.print(root.data+" ");
        inorder(root.right);

    }
    public static node inordersuccessor(node root)
    {
        while(root.left!=null)
        {
            root=root.left;
        }
        return root;
    }

    
    public static void main(String[] args) {
        int values[]={8,5,3,1,4,6,10,11,14};
        node root=null;

        

        for(int i=0;i<values.length;i++)
        {
            root=insert(root,values[i]);
        }

        inorder(root);
        System.out.println();

        root=delete(root,1);
        System.out.println();
        inorder(root);

    }
}
